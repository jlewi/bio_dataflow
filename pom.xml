<?xml version="1.0" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>contrail</groupId>
  <artifactId>contrail</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>contrail</name>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <junit-version>4.8.2</junit-version>
    <jackson-version>1.8.8</jackson-version>
    <!--Avro 1.7.1 offers SortedKeyValue pairs-->
    <avro-version>1.7.3</avro-version>
  </properties>
  <profiles>
    <!-- We define different profiles for the different hadoop versions
         we might build against. You can set the profile on the command
         line using -P [PROFILE_ID].

         If you don't want to have to specify it on the command line you
         can set the profile in your maven settings file see
         http://maven.apache.org/guides/introduction/introduction-to-profiles.html
      -->
    <profile>
      <id>v1</id>
      <properties>
	<hadoop-version>1.2.1</hadoop-version>
      </properties>
      <dependencies>
        <dependency>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>hadoop-core</artifactId>
          <version>1.2.1</version>
          <scope>provided</scope>
        </dependency>
       <dependency>
	  <!--hadoop 1.2.1 appears to pull in version 3.1 which has an invalid pom.xml.-->
          <groupId>asm</groupId>
          <artifactId>asm</artifactId>
          <version>3.3</version>
          <scope>provided</scope>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>cdh4</id>
      <properties>
	<hadoop-version>2.0.0-mr1-cdh4.2.1</hadoop-version>
      </properties>
      <dependencies>
 	 <dependency>
           <groupId>org.apache.hadoop</groupId>
           <artifactId>hadoop-hdfs</artifactId>
           <version>2.0.0-cdh4.0.1</version>
           <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>hadoop-common</artifactId>
          <version>2.0.0-cdh4.0.1</version>
          <scope>provided</scope>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <!-- Profile for running in dataflow -->
      <id>dataflow</id>
      <properties>
	<hadoop-version>1.2.1</hadoop-version>
      </properties>
      <!-- Hadoop jars aren't provided so we need to bundle them.-->
      <dependencies>
        <dependency>
          <groupId>org.apache.hadoop</groupId>
          <artifactId>hadoop-core</artifactId>
          <version>1.2.1</version>
        </dependency>
       <dependency>
	  <!--hadoop 1.2.1 appears to pull in version 3.1 which has an invalid pom.xml.-->
          <groupId>asm</groupId>
          <artifactId>asm</artifactId>
          <version>3.3</version>
        </dependency>
         <dependency>
  	 <groupId>commons-lang</groupId>
   	 <artifactId>commons-lang</artifactId>
  	 <version>2.6</version>
  	</dependency>
      </dependencies>
    </profile>
    <profile>
      <id>cdh3</id>
      <properties>
	<hadoop-version>0.20.2-cdh3u6</hadoop-version>
      </properties>
    </profile>
  </profiles>
  <dependencies>
  	<!--Provides useful methods for manipulating core classes; e.g
  	    StringUtils-->
	 <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
        <version>2.1</version>
	</dependency>
  	<dependency>
  	 <groupId>org.apache.commons</groupId>
   	 <artifactId>commons-lang3</artifactId>
  	 <version>3.1</version>
  	</dependency>
  	<dependency>
    	<groupId>commons-configuration</groupId>
    	<artifactId>commons-configuration</artifactId>
    	<version>1.6</version>
    	<type>jar</type>
    	<scope>compile</scope>
	</dependency>
  <dependency>
    <groupId>org.apache.crunch</groupId>
    <artifactId>crunch-core</artifactId>
    <!-- 0.9.0 is missing some fixes that are in 0.8.3 and 0.10.0 -->
    <version>0.9.0</version>
  </dependency>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-core</artifactId>
      <!-- hadoop's execution environment provides its own jars, usurping any others.
           So we should not include it here -->
      <version>${hadoop-version}</version>
      <scope>provided</scope>
    </dependency>
   <dependency>
     <!-- We have a couple references to junit in non test files.
          For example, ContrailLogger calls JUnit.fail when in test mode.
       -->
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit-version}</version>
      <!--<scope>test</scope>-->
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.14</version>
    </dependency>
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro</artifactId>
      <version>${avro-version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro-mapred</artifactId>
      <version>${avro-version}</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
      <version>${jackson-version}</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>${jackson-version}</version>
    </dependency>
    
     <dependency>
      <groupId>com.google.cloud.dataflow</groupId>
      <artifactId>dataflow-sdk</artifactId>
      <version>1.0-140422-SNAPSHOT</version>
    </dependency>

	<!--For dataflow -->
    <dependency>
      <groupId>com.google.cloud.dataflow</groupId>
      <artifactId>dataflow-sdk</artifactId>
      <version>[1.0.140618,)</version>
    </dependency>
	
    <dependency>
      <groupId>com.google.apis</groupId>
      <artifactId>google-api-services-storage</artifactId>
      <version>v1beta2-rev34-1.17.0-rc</version>
    </dependency>
    <dependency>
      <groupId>com.google.http-client</groupId>
      <artifactId>google-http-client-jackson2</artifactId>
      <version>1.17.0-rc</version>
    </dependency>
    <dependency>
      <groupId>com.google.oauth-client</groupId>
      <artifactId>google-oauth-client-jetty</artifactId>
      <version>1.17.0-rc</version>
    </dependency>

    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>2.4.1</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>2.4.1</version>
    </dependency>    
  </dependencies>
  <repositories>
    <repository>
      <id>apache.snapshots</id>
      <name>Apache Snapshot Repository</name>
      <url>http://repository.apache.org/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
    </repository>
    <!--cloudera repo-->
    <repository>
      <id>cloudera</id>
      <name>Cloudera  Repository</name>
      <url>https://repository.cloudera.com/content/repositories/releases</url>
    </repository>
    <repository>
      <id>cloudera-artifactory</id>
      <name>Cloudera  Repository Artifactory</name>
      <url>https://repository.cloudera.com/artifactory/public</url>
    </repository>
  </repositories>
  <build>
    <plugins>
      <plugin>
	<groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
	<version>2.3.2</version>
	<configuration>
	  <source>1.7</source>
	  <target>1.7</target>
	</configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
       	<!-- Uncomment to include src/test/java so profiling in netbeans will work.
		     You might also need to change the scope of junit so that its always
                     included and not just in the non test archives.-->	
	<!-- <executions> -->
        <!-- <execution> -->
            <!-- <phase>generate-sources</phase> -->
            <!-- <goals> -->
              <!-- <goal>add-source</goal> -->
            <!-- </goals> -->
            <!-- <configuration> -->
		<!--<sources>-->
		<!--<source>src/test/java</source>-->
                <!--</sources>-->
            <!-- </configuration> -->
          <!-- </execution> -->
        <!--< /executions> -->
      </plugin>
      <!-- Plugin to create javadoc. To generate the docs do:mvn javadoc:javadoc-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <links>
            <link>http://jackson.codehaus.org/${jackson-version}/javadoc/</link>
            <link>http://java.sun.com/products/servlet/2.3/javadoc/</link>
            <link>http://hadoop.apache.org/common/docs/r${hadoop-version}/api/</link>
          </links>
        </configuration>
      </plugin>
      <!--Create a jar containing the tests. This way we can package them into an assembly and run the timing tests on hadoop.-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.2</version>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- create a bundled jar suitable for execution on hadoop -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <id>job</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <descriptors>
                <descriptor>src/main/assembly/job.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
          <!--Create a second bundled jar which contains the classes used to
              run timing experiments.-->
          <execution>
            <id>test</id>
            <phase>process-test-classes</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <descriptors>
                <descriptor>src/test/assembly/test.xml</descriptor>
              </descriptors>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!--use the maven plugin for avro to generate the sources from the protocols -->
      <plugin>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro-maven-plugin</artifactId>
        <version>${avro-version}</version>
        <executions>
          <execution>
            <id>schemas</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>idl-protocol</goal>
            </goals>
            <configuration>
              <includes>
                <include>*.avdl</include>
              </includes>
              <sourceDirectory>${project.basedir}/share/schemas/contrail/</sourceDirectory>
              <outputDirectory>${project.build.directory}/generated-sources/java</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- An alternative plugin for creating bundles. -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>2.4.0</version>
        <extensions>true</extensions>
        <configuration>
          <instructions>
            <!-- Embed all dependencies -->
            <Embed-Dependency>*;scope=compile|runtime;inline=true</Embed-Dependency>
          </instructions>
        </configuration>
      </plugin>
    </plugins>
    <!--The tests should include the json files for integration tests.-->
    <testResources>
      <testResource>
        <directory>${project.basedir}/src/test/java</directory>
        <includes>
          <include>**/*.fastq</include>
          <include>**/*.json</include>
        </includes>
      </testResource>
    </testResources>
  </build>
</project>
