<?xml version="1.0" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>contrail</groupId>
  <artifactId>contrail-dataflow</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>Dataflow AddOns for Contrail.</name>
  <parent>
    <groupId>contrail</groupId>
    <artifactId>contrail-dataflow-parent</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <junit-version>4.8.2</junit-version>
    <jackson-version>1.8.8</jackson-version>
    <!--Avro 1.7.1 offers SortedKeyValue pairs-->
    <!--Dataflow seems to require at least version 1.7.7-->
    <avro-version>1.7.7</avro-version>
  </properties>
  <dependencies>
    <dependency>
      <groupId>contrail</groupId>
      <artifactId>contrail</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
    <!-- This is a library of dataflow utilities -->
    <dependency>
      <groupId>dataflow</groupId>
      <artifactId>dataflow</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
    <!--Provides useful methods for manipulating core classes; e.g
  	    StringUtils-->
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.1</version>
    </dependency>
    <dependency>
      <groupId>commons-configuration</groupId>
      <artifactId>commons-configuration</artifactId>
      <version>1.6</version>
      <type>jar</type>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <version>2.6</version>
    </dependency>
    <dependency>
      <groupId>commons-cli</groupId>
      <artifactId>commons-cli</artifactId>
      <version>1.2</version>
    </dependency>
    <!-- Hadoop is used to wrap existing hadoop jobs with Dataflow code.
      Since we aren't running on a hadoop cluster we need to bundle this.
      -->
    <dependency>
      <groupId>org.apache.hadoop</groupId>
      <artifactId>hadoop-core</artifactId>
      <version>1.2.1</version>
    </dependency>    
    <dependency>
      <!--hadoop 1.2.1 appears to pull in version 3.1 which has an invalid pom.xml.-->
      <groupId>asm</groupId>
      <artifactId>asm</artifactId>
      <version>3.3</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <!-- We have a couple references to junit in non test files.For example, ContrailLogger calls JUnit.fail when in test mode.-->
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit-version}</version>
      <!--<scope>test</scope>-->
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <version>1.2.14</version>
    </dependency>
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro</artifactId>
      <version>${avro-version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro-mapred</artifactId>
      <version>${avro-version}</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
      <version>${jackson-version}</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>${jackson-version}</version>
    </dependency>
    <!--For dataflow -->
    <dependency>
      <groupId>com.google.cloud.dataflow</groupId>
      <artifactId>google-cloud-dataflow-java-sdk-all</artifactId>
      <version>[0.3.141216,)</version>
      <!--<version>LATEST</version>-->
    </dependency>
    <!--Eclipse was complaining about not finding com.google.common.reflect.TypeToken-->
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>[18.0,)</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <version>2.4.1</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-annotations</artifactId>
      <version>2.4.1</version>
    </dependency>
    <!-- Codec library provides base64 encoding. -->
    <dependency>
      <groupId>org.apache.directory.studio</groupId>
      <artifactId>org.apache.commons.codec</artifactId>
      <version>1.8</version>
    </dependency>
    <!-- Docker Client used by Dataflow programs.-->
    <dependency>
      <groupId>com.spotify</groupId>
      <artifactId>docker-client</artifactId>
      <version>2.7.0</version>
    </dependency>
    <!-- test dependencies -->
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>1.3</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <repositories>
    <repository>
      <id>apache.snapshots</id>
      <name>Apache Snapshot Repository</name>
      <url>http://repository.apache.org/snapshots</url>
      <releases>
        <enabled>false</enabled>
      </releases>
    </repository>
    <!--cloudera repo-->
    <repository>
      <id>cloudera</id>
      <name>Cloudera  Repository</name>
      <url>https://repository.cloudera.com/content/repositories/releases</url>
    </repository>
    <repository>
      <id>cloudera-artifactory</id>
      <name>Cloudera  Repository Artifactory</name>
      <url>https://repository.cloudera.com/artifactory/public</url>
    </repository>
  </repositories>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <!-- Uncomment to include src/test/java so profiling in netbeans will work.You might also need to change the scope of junit so that its alwaysincluded and not just in the non test archives.-->
        <!--<executions>-->
        <!--<execution>-->
        <!--<phase>generate-sources</phase>-->
        <!--<goals>-->
        <!--<goal>add-source</goal>-->
        <!--</goals>-->
        <!--<configuration>-->
        <!--<sources>-->
        <!--<source>src/test/java</source>-->
        <!--</sources>-->
        <!--</configuration>-->
        <!--</execution>-->
        <!--< /executions>-->
      </plugin>
      <!-- Plugin to create javadoc. To generate the docs do:mvn javadoc:javadoc-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <links>
            <link>http://jackson.codehaus.org/${jackson-version}/javadoc/</link>
            <link>http://java.sun.com/products/servlet/2.3/javadoc/</link>
            <link>http://hadoop.apache.org/common/docs/r${hadoop-version}/api/</link>
          </links>
        </configuration>
      </plugin>
      <!--use the maven plugin for avro to generate the sources from the protocols -->
      <plugin>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro-maven-plugin</artifactId>
        <version>${avro-version}</version>
        <executions>
          <execution>
            <id>schemas</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>idl-protocol</goal>
            </goals>
            <configuration>
              <includes>
                <include>*.avdl</include>
              </includes>
              <!--Include the schemas from contrail because we build on them. -->
	          <!--<sourceDirectory>${project.basedir}/../contrail/share/schemas/contrail/</sourceDirectory>-->
              <sourceDirectory>${project.basedir}/share/schemas/contrail/</sourceDirectory>
              <outputDirectory>${project.build.directory}/generated-sources/java</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- An alternative plugin for creating bundles. -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>2.4.0</version>
        <extensions>true</extensions>
        <configuration>        
          <instructions>
            <!-- Embed all dependencies -->
	        <Embed-Transitive>true</Embed-Transitive>            
            <!-- Embed all dependencies -->
            <Embed-Dependency>*;scope=compile|runtime;inline=true</Embed-Dependency>
          </instructions>
        </configuration>
      </plugin>
    </plugins>
    <!--The tests should include the json files for integration tests.-->
    <testResources>
      <testResource>
        <directory>${project.basedir}/src/test/java</directory>
        <includes>
          <include>**/*.fastq</include>
          <include>**/*.json</include>
        </includes>
      </testResource>
    </testResources>
  </build>
</project>
